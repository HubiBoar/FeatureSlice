using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.FeatureManagement;
using OneOf;
using OneOf.Types;

namespace FeatureSlice2;

public static partial class WIP
{
    public struct Disabled();

    public delegate Task<OneOf<TResponse, Disabled, Error>> Dispatch<TRequest, TResponse>(TRequest request, IServiceProvider provider, string handlerName, Func<TRequest, Task<OneOf<TResponse, Error>>> handler);

    public interface IHandler<TRequest, TResponse> : FeatureSlice.IMethod<TRequest, Task<OneOf<TResponse, Error>>>
    {
        public abstract static string Name { get; }

        public abstract static void Register(IServiceCollection services, Dispatch<TRequest, TResponse> dispatcher);
    }

    public interface IDispatcher<TRequest, TResponse>
    {
        public abstract static Dispatch<TRequest, TResponse> GetDispatch();
    }
}

public static partial class WIPExample
{
    public sealed class InMemoryDispatcher<TRequest, TResponse> : WIP.IDispatcher<TRequest, TResponse>
    {
        public static WIP.Dispatch<TRequest, TResponse> GetDispatch()
        {
            return InMemoryDispatcher.Dispatch<TRequest, TResponse>;
        }
    }

    public sealed class InMemoryDispatcher
    {
        public static Task<OneOf<TResponse, WIP.Disabled, Error>> Dispatch<TRequest, TResponse>(TRequest request, IServiceProvider provider, )
        {
            return InMemoryDispatch(
                request,
                provider.GetRequiredService<THandler>(),
                provider.GetRequiredService<IFeatureManager>(),
                provider.GetServices<WIP.IHandler<TRequest, TResponse>.IPipeline>().ToList());
        }

        public static async Task<OneOf<TResponse, WIP.Disabled, Error>> InMemoryDispatch<TRequest, TResponse, THandler>(TRequest request, THandler handler, IFeatureManager featureManager, IReadOnlyList<WIP.IHandler<TRequest, TResponse>.IPipeline> pipelines)
            where THandler : WIP.IHandler<TRequest, TResponse>
        {
            var isEnabled = await featureManager.IsEnabledAsync(THandler.Name);
            if(isEnabled == false)
            {
                return new WIP.Disabled();
            }

            var pipelinesResult = await FeatureSlice.PipelineExtensions.RunPipeline(pipelines, request, handler.Handle);
            return pipelinesResult.Match<OneOf<TResponse, WIP.Disabled, Error>>(response => response, error => error);
        }
    }

    public sealed class ServiceBusDispatcher<TRequest, THandler> : WIP.IDispatcher<TRequest, Success, THandler>
        where THandler : WIP.IHandler<TRequest, Success>
    {
        public static WIP.Dispatch<TRequest, Success, THandler> GetDispatch()
        {
            return (request, provider) => InMemoryDispatch(
                request,
                provider.GetRequiredService<THandler>(),
                provider.GetRequiredService<IFeatureManager>(),
                provider.GetServices<WIP.IHandler<TRequest, Success>.IPipeline>().ToList());
        }

        public static async Task<OneOf<Success, WIP.Disabled, Error>> InMemoryDispatch(TRequest request, THandler handler, IFeatureManager featureManager, IReadOnlyList<WIP.IHandler<TRequest, Success>.IPipeline> pipelines)
        {
            var isEnabled = await featureManager.IsEnabledAsync(THandler.Name);
            if(isEnabled == false)
            {
                return new WIP.Disabled();
            }

            var pipelinesResult = await FeatureSlice.PipelineExtensions.RunPipeline(pipelines, request, handler.Handle);
            return pipelinesResult.Match<OneOf<Success, WIP.Disabled, Error>>(response => response, error => error);
        }
    }
}

public static partial class WIPExample
{
    public sealed record Request();
    public sealed record Response();

    public sealed partial class Handler : WIP.IHandler<Request, Response>
    {
        public static string Name => "Handler";

        public Task<OneOf<Response, Error>> Handle(Request request)
        {
            throw new Exception();
        }
    }

    public static void Register(IServiceCollection services)
    {
        services.AddSingleton(typeof(InMemoryDispatcher<,,>));
        services.AddSingleton(typeof(ServiceBusDispatcher<,>));

        Handler.Register(services, InMemoryDispatcher.Dispatch<Request, Response, Handler>);
    }

    public static Task Run(Handler.Dispatch dispatch)
    {
        return dispatch.Invoke(new Request());
    }
}

//AutoGenerated
public static partial class WIPExample
{
    public sealed partial class Handler : WIP.IHandlerRegisterer<Request, Response, Handler>
    {
        public delegate Task<OneOf<Response, WIP.Disabled, Error>> Dispatch(Request request);

        public static void Register(IServiceCollection services, WIP.Dispatch<Request, Response, Handler> dispatcher)
        {
            services.AddSingleton<Dispatch>(provider => request => dispatcher(request, provider));
        }

        public static void Register(IServiceCollection services)
        {
            WIP.IHandlerRegisterer<Request, Response, Handler>.Register(services);
        }
    }
}
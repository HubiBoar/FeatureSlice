using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.FeatureManagement;
using OneOf;
using OneOf.Types;

namespace FeatureSlice;


public sealed partial class Example : IFeatureSlice
{
    public record Request();

    public record Response();

    public partial class Handler : IFeatureSlice.IHandler<Request, Response>.WithToggle
    {
        public static string Name => "lol";

        public Task<OneOf<Response, Error>> Handle(Request request)
        {
            throw new NotImplementedException();
        }
    }

    public partial class Handler2 : IFeatureSlice.IHandler<Request, Success>
    {
        public Task<OneOf<Success, Error>> Handle(Request request)
        {
            throw new NotImplementedException();
        }
    }

    public static void Register(IServiceCollection services)
    {
        services.Register<Handler>();
        services.Register<Handler2>();
    }
}

public class ExampleUser
{
    public static void Use(Example.Handler.Dispatch dispatcher)
    {
        dispatcher(new Example.Request());
    }
}

//AutoGenerated
public sealed partial class Example
{
    public partial class Handler : IFeatureSlice.IHandler<Request, Response>.WithToggle.IRegistrable<Handler, Handler.Dispatch>
    {
        public delegate Task<OneOf<Response, Disabled, Error>> Dispatch(Request request);

        public static Dispatch Convert(IFeatureSlice.IHandler<Request, Response>.WithToggle.Dispatch dispatcher)
        {
            return request => dispatcher(request);
        }
    }


    public partial class Handler2 : IFeatureSlice.IHandler<Request, Success>.IRegistrable<Handler2, Handler2.Dispatch>
    {
        public delegate Task<OneOf<Success, Error>> Dispatch(Request request);

        public static Dispatch Convert(IFeatureSlice.IHandler<Request, Success>.Dispatch dispatcher)
        {
            return request => dispatcher(request);
        }
    }
}







